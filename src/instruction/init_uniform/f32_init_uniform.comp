#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(std430, binding = 0) buffer OutBuffer { float weights[]; };

layout(push_constant) uniform PC {
    uint total_elements;
    uint seed;
    float min_val;        // min value (or -bound if using bound)
    float max_val;        // max value (or +bound if using bound)
} pc;

uint rand_state = 0;

void init_rand(uint seed) {
    rand_state = seed;
}

uint rand_uint() {
    rand_state = rand_state * 1664525u + 1013904223u;
    return rand_state;
}

float rand_float() {
    return float(rand_uint()) / 4294967295.0;
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= pc.total_elements) return;
    
    // random generator with unique seed per thread
    init_rand(pc.seed + idx);
    
    // uniform distribution between min_val and max_val
    float range = pc.max_val - pc.min_val;
    weights[idx] = pc.min_val + rand_float() * range;
}
