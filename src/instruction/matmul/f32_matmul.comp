#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430, binding = 0) buffer InBufferA { float a[]; };
layout(std430, binding = 1) buffer InBufferB { float b[]; };
layout(std430, binding = 2) buffer OutBuffer { float c[]; };

// Move shapes and strides into a uniform buffer (UBO instead of push-constants)
layout(std140, binding = 3) uniform TensorMetadata {
    uint dim_count_a;
    uint dim_count_b;
    uint dim_count_c;

    // Key dimensions for matrix multiplication
    uint m;              // Output rows (from A)
    uint k;              // Contraction dimension
    uint n;              // Output columns (from B)
    
    uint batch_dims;

    // Contraction axis information
    uint a_k_axis;       // Which axis in A is the k dimension
    uint b_k_axis;       // Which axis in B is the k dimension
    uint a_m_axis;       // Which axis in A is the m dimension
    uint b_n_axis;       // Which axis in B is the n dimension

    // Tensor shapes and strides
    uint shape_a[8];
    uint shape_b[8];
    uint shape_c[8];
    uint strides_a[8];
    uint strides_b[8];
    uint strides_c[8];
} meta;

// Shared-memory tiles
shared float tileA[16][16];
shared float tileB[16][16];

// Broadcast-safe indexing: only treat size==1 as broadcast
uint idx_broadcast(const uint idxs[8], uint dim_count,
                   const uint shape[8], const uint strides[8]) {
    uint off = 0;
    for (uint d = 0; d < dim_count; ++d) {
        uint dimIdx = (shape[d] == 1u) ? 0u : idxs[d];
        off += dimIdx * strides[d];
    }
    return off;
}

void main() {
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    uint batchID = gl_GlobalInvocationID.z;

    if (row >= meta.m || col >= meta.n) return;

    // Compute total batch size
    uint batch_size = 1;
    for (uint d = 0; d < meta.batch_dims; ++d)
        batch_size *= meta.shape_c[d];
    if (batchID >= batch_size) return;

    // Decode batch indices
    uint rem = batchID;
    uint batch_idxs[8];
    for (uint d = 0; d < meta.batch_dims; ++d) {
        batch_idxs[d] = rem % meta.shape_c[d];
        rem /= meta.shape_c[d];
    }

    // Build base c_indices
    uint c_idxs[8];
    for (uint d = 0; d < meta.batch_dims; ++d)
        c_idxs[d] = batch_idxs[d];
    c_idxs[meta.dim_count_c-2] = row;
    c_idxs[meta.dim_count_c-1] = col;
    uint c_index = idx_broadcast(c_idxs, meta.dim_count_c, meta.shape_c, meta.strides_c);

    float sum = 0.0;
    uint numTiles = (meta.k + 16 - 1) / 16;

    // Temporary index arrays
    uint a_idxs[8];
    uint b_idxs[8];

    // Loop over tiles in k dimension
    for (uint t = 0; t < numTiles; ++t) {
        // Each thread loads one element of A and B into shared memory
        uint kGlobal = t * 16 + gl_LocalInvocationID.x;
        // Prepare A indices for broadcast
        for (uint d = 0; d < meta.batch_dims; ++d) a_idxs[d] = batch_idxs[d];
        // Set matrix dims in A
        for (uint d = meta.batch_dims; d < meta.dim_count_a; ++d) {
            if (d == meta.a_m_axis) a_idxs[d] = row;
            else if (d == meta.a_k_axis) a_idxs[d] = (kGlobal < meta.k ? kGlobal : 0u);
            else a_idxs[d] = 0u;
        }
        uint aIndex = idx_broadcast(a_idxs, meta.dim_count_a, meta.shape_a, meta.strides_a);
        tileA[gl_LocalInvocationID.y][gl_LocalInvocationID.x] =
            (kGlobal < meta.k ? a[aIndex] : 0.0);

        // Prepare B indices
        for (uint d = 0; d < meta.batch_dims; ++d) b_idxs[d] = batch_idxs[d];
        for (uint d = meta.batch_dims; d < meta.dim_count_b; ++d) {
            if (d == meta.b_k_axis) b_idxs[d] = (kGlobal < meta.k ? kGlobal : 0u);
            else if (d == meta.b_n_axis) b_idxs[d] = col;
            else b_idxs[d] = 0u;
        }
        uint bIndex = idx_broadcast(b_idxs, meta.dim_count_b, meta.shape_b, meta.strides_b);
        tileB[gl_LocalInvocationID.y][gl_LocalInvocationID.x] =
            (kGlobal < meta.k ? b[bIndex] : 0.0);

        // Wait for all loads
        barrier();

        // Compute partial sums
        for (uint kk = 0; kk < 16; ++kk) {
            sum += tileA[gl_LocalInvocationID.y][kk] *
                   tileB[kk][gl_LocalInvocationID.x];
        }
        barrier();
    }

    // Write out
    c[c_index] = sum;
}
