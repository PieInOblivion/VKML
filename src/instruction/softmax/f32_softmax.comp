#version 450

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer InBuffer { float a[]; };
layout(std430, binding = 1) buffer OutBuffer { float b[]; };

// Requires batch_size and feature_size as push constants
layout(push_constant) uniform PushConstants {
    uint batch_size;
    uint feature_size;
} constants;

shared float max_vals[256]; // For finding max in each batch
shared float sum_vals[256]; // For summing exp values

void main() {
    uint local_id = gl_LocalInvocationID.x;
    uint batch_idx = gl_WorkGroupID.x;

    if (batch_idx >= constants.batch_size) {
        return;
    }

    // Initialize shared memory
    max_vals[local_id] = -3.402823466e+38; // -FLT_MAX
    sum_vals[local_id] = 0.0;

    // Ensure all threads initialized shared memory
    barrier();

    // Calculate base index for this batch
    uint base_idx = batch_idx * constants.feature_size;

    // Find maximum in this batch (for numerical stability)
    for (uint i = local_id; i < constants.feature_size; i += gl_WorkGroupSize.x) {
        max_vals[local_id] = max(max_vals[local_id], a[base_idx + i]);
    }

    // Reduction to find the maximum
    for (uint stride = gl_WorkGroupSize.x/2; stride > 0; stride >>= 1) {
        barrier();
        if (local_id < stride) {
            max_vals[local_id] = max(max_vals[local_id], max_vals[local_id + stride]);
        }
    }

    barrier();

    // Now max_vals[0] contains the maximum value for this batch
    float max_val = max_vals[0];

    // Compute exponentials and partial sums
    for (uint i = local_id; i < constants.feature_size; i += gl_WorkGroupSize.x) {
        uint idx = base_idx + i;
        float exp_val = exp(a[idx] - max_val);
        b[idx] = exp_val; // Store temporarily
        sum_vals[local_id] += exp_val;
    }

    // Reduction to compute total sum
    for (uint stride = gl_WorkGroupSize.x/2; stride > 0; stride >>= 1) {
        barrier();
        if (local_id < stride) {
            sum_vals[local_id] += sum_vals[local_id + stride];
        }
    }

    barrier();

    // Now sum_vals[0] contains the sum of exponentials for this batch
    float sum = sum_vals[0];

    // Normalize by sum
    for (uint i = local_id; i < constants.feature_size; i += gl_WorkGroupSize.x) {
        uint idx = base_idx + i;
        b[idx] /= sum;
    }
}
