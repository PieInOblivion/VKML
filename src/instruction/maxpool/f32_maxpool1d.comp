#version 450

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer SrcBuf { float src[]; };
layout(std430, binding = 1) buffer DstBuf { float dst[]; };

layout(push_constant) uniform PC {
    uint n;
    uint c;
    uint input_len;
    uint output_len;
    uint kernel;
    uint stride;
    uint dilation;
    uint pad_begin;
} pc;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    uint total = pc.n * pc.c * pc.output_len;
    if (gid >= total) return;

    uint rem = gid;
    uint out_pos = rem % pc.output_len; rem /= pc.output_len;
    uint ch = rem % pc.c; rem /= pc.c;
    uint batch = rem;

    float acc = 0.0;
    bool found = false;

    for (uint k = 0u; k < pc.kernel; ++k) {
        int in_pos_i = int(out_pos) * int(pc.stride) - int(pc.pad_begin) + int(k) * int(pc.dilation);
        if (in_pos_i < 0) continue;
        uint in_pos = uint(in_pos_i);
        if (in_pos >= pc.input_len) continue;

        // src offset: ((batch * C + ch) * input_len) + in_pos
        uint src_off = ((batch * pc.c + ch) * pc.input_len) + in_pos;
        float val = src[src_off];
        if (!found) { acc = val; found = true; }
        else if (val > acc) { acc = val; }
    }

    uint dst_off = ((batch * pc.c + ch) * pc.output_len) + out_pos;
    if (found) dst[dst_off] = acc; else dst[dst_off] = 0.0;
}
