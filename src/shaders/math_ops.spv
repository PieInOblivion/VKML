#version 450

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
    uint data_size;
    uint op_type; // 0 = multiply, 1 = add
} pc;

layout(std430, set = 0, binding = 0) buffer InBuffer1 {
    uint data[];
} in_buffer1;

layout(std430, set = 0, binding = 1) buffer InBuffer2 {
    uint data[];
} in_buffer2;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    
    if (idx >= pc.data_size) {
        return;
    }

    // Work with bytes as unsigned integers
    uint value1 = in_buffer1.data[idx / 4] >> ((idx % 4) * 8) & 0xFF;
    uint value2 = in_buffer2.data[idx / 4] >> ((idx % 4) * 8) & 0xFF;
    uint result;

    if (pc.op_type == 0) {
        // Multiply
        result = (value1 * value2) / 255;
    } else {
        // Add with saturation
        result = min(value1 + value2, 255u);
    }

    // Update the byte in the uint
    uint shift = (idx % 4) * 8;
    uint mask = ~(0xFFu << shift);
    in_buffer1.data[idx / 4] = (in_buffer1.data[idx / 4] & mask) | (result << shift);
}