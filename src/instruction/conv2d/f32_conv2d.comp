#version 450

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer InBuffer { float a[]; };
layout(std430, binding = 1) buffer FilterBuffer { float b[]; };
layout(std430, binding = 2) buffer BiasBuffer { float bias[]; }; // Optional
layout(std430, binding = 3) buffer OutBuffer { float c[]; };

layout(push_constant) uniform PushConstants {
    // Dimensions
    uint batch_size;
    uint in_channels;
    uint in_height;
    uint in_width;

    uint filter_out_channels;
    uint filter_height;
    uint filter_width;

    uint out_height;
    uint out_width;

    // Convolution parameters
    uint stride_h;
    uint stride_w;
    uint padding_h;
    uint padding_w;

    // Tensor strides
    uint src_stride_0;  // Batch stride
    uint src_stride_1;  // Channel stride
    uint src_stride_2;  // Height stride
    uint src_stride_3;  // Width stride

    uint filter_stride_0;  // Out channel stride
    uint filter_stride_1;  // In channel stride
    uint filter_stride_2;  // Height stride
    uint filter_stride_3;  // Width stride

    uint dst_stride_0;  // Batch stride
    uint dst_stride_1;  // Channel stride
    uint dst_stride_2;  // Height stride
    uint dst_stride_3;  // Width stride

    uint use_bias;
} params;

// Function to get linearized index for input tensor using strides
uint get_input_index(uint b, uint c, uint h, uint w) {
    return b * params.src_stride_0 +
           c * params.src_stride_1 +
           h * params.src_stride_2 +
           w * params.src_stride_3;
}

// Function to get linearized index for filter tensor using strides
uint get_filter_index(uint oc, uint ic, uint h, uint w) {
    return oc * params.filter_stride_0 +
           ic * params.filter_stride_1 +
           h * params.filter_stride_2 +
           w * params.filter_stride_3;
}

// Function to get linearized index for output tensor using strides
uint get_output_index(uint b, uint c, uint h, uint w) {
    return b * params.dst_stride_0 +
           c * params.dst_stride_1 +
           h * params.dst_stride_2 +
           w * params.dst_stride_3;
}

void main() {
    uint global_id = gl_GlobalInvocationID.x;

    // Calculate total output elements
    uint total_elements = params.batch_size * params.filter_out_channels * params.out_height * params.out_width;

    // Check if we're within bounds
    if (global_id >= total_elements) {
        return;
    }

    // Calculate output position using division to map from 1D to 4D
    uint output_elements_per_batch = params.filter_out_channels * params.out_height * params.out_width;
    uint batch = global_id / output_elements_per_batch;

    uint output_elements_per_channel = params.out_height * params.out_width;
    uint out_channel = (global_id % output_elements_per_batch) / output_elements_per_channel;

    uint out_index_in_channel = global_id % output_elements_per_channel;
    uint out_y = out_index_in_channel / params.out_width;
    uint out_x = out_index_in_channel % params.out_width;

    // Compute the convolution
    float sum = 0.0;

    // Loop over input channels
    for (uint ic = 0; ic < params.in_channels; ic++) {
        // Loop over filter height
        for (uint kh = 0; kh < params.filter_height; kh++) {
            // Loop over filter width
            for (uint kw = 0; kw < params.filter_width; kw++) {
                // Calculate input position with padding and stride
                int in_h = int(out_y * params.stride_h + kh) - int(params.padding_h);
                int in_w = int(out_x * params.stride_w + kw) - int(params.padding_w);

                // Check if input position is valid (not in padding area)
                if (in_h >= 0 && in_h < int(params.in_height) &&
                    in_w >= 0 && in_w < int(params.in_width)) {

                    uint in_idx = get_input_index(batch, ic, uint(in_h), uint(in_w));
                    uint filter_idx = get_filter_index(out_channel, ic, kh, kw);

                    sum += a[in_idx] * b[filter_idx];
                }
            }
        }
    }

    // Add bias if needed
    if (params.use_bias != 0) {
        sum += bias[out_channel];
    }

    // Write output
    uint out_idx = get_output_index(batch, out_channel, out_y, out_x);
    c[out_idx] = sum;
}
